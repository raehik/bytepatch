name: Hackage artifacts

on:
  push:
    branches:
    - main

env:
  EXE_NAME: bytepatch
  ghc: "9.0" # TODO: can't use this in job name...
  cabal: "3.6" # ghcup recommended as of 2021-12-21

jobs:
  ubuntu-cabal-hackage:
    runs-on: ubuntu-latest
    name: Ubuntu / GHC 9.0, Cabal / Hackage

    steps:

    # TODO: GHC decides to recompile based on timestamp, so cache isn't used
    # Preferably GHC would work via hashes instead. Stack had this feature
    # merged in Aug 2020.
    # Upstream GHC issue: https://gitlab.haskell.org/ghc/ghc/-/issues/16495
    # My issue on haskell/actions: https://github.com/haskell/actions/issues/41
    # This also requires us to do a deep fetch, else we don't get the Git commit
    # history we need to rewrite mod times.
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set all tracked file modification times to the time of their last commit
      run: |
        rev=HEAD
        for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do
            touch -d $(git log --pretty=format:%cI -1 "$rev" -- "$f") "$f";
        done

    - name: Setup Haskell build environment
      id: setup-haskell-build-env
      uses: haskell/actions/setup@v1
      with:
        ghc-version: ${{ env.ghc }}
        cabal-version: ${{ env.cabal }}

    - run: cabal freeze

    - name: Cache Cabal build artifacts
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.setup-haskell-build-env.outputs.cabal-store }}
          dist-newstyle
        key: haddock-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: haddock-${{ matrix.ghc }}

    # need both --haddock-for-hackage (for special links) and
    # --enable-documentation (for dependencies)
    - run: cabal haddock --haddock-for-hackage --enable-doc
    - run: cabal sdist

    - name: Upload Hackage sdist
      uses: actions/upload-artifact@v2
      with:
        path: dist-newstyle/sdist/${{ env.EXE_NAME }}-*.tar.gz
        name: ${{ env.EXE_NAME }}-sdist-${{ github.sha }}.tar.gz
        if-no-files-found: error

    - name: Upload Hackage Haddock docs
      uses: actions/upload-artifact@v2
      with:
        path: dist-newstyle/${{ env.EXE_NAME }}-*-docs.tar.gz
        name: ${{ env.EXE_NAME }}-hackage-haddocks-${{ github.sha }}.tar.gz
        if-no-files-found: error

    - name: Delete prepared tarballs (else can't extract just newest next time)
      run: |
        rm dist-newstyle/${{ env.EXE_NAME }}-*-docs.tar.gz
        rm dist-newstyle/sdist/${{ env.EXE_NAME }}-*.tar.gz
